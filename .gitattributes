import tkinter as tk

class Begin(tk.Frame):
	def __init__(self):
		tk.Frame.__init__(self)
		self.grid()
		self.create_widgets()
		
	def create_widgets(self):
		self.lb1 = tk.Label(self, height=1, width=40, text='GUY1')
		self.lb2 = tk.Label(self, height=1, width=40, text='name1:')
		self.lb3 = tk.Label(self, height=1, width=40, text='token1:')
		self.lb4 = tk.Label(self, height=1, width=40, text='GUY2')
		self.lb5 = tk.Label(self, height=1, width=40, text='name2:')
		self.lb6 = tk.Label(self, height=1, width=40, text='token2:')
		self.txtw1 = tk.Text(self , height = 1 , width = 20) 
		self.txtw2 = tk.Text(self , height = 1 , width = 20)
		self.txtw3 = tk.Text(self , height = 1 , width = 20)
		self.txtw4 = tk.Text(self , height = 1 , width = 20)
		self.btn1 = tk.Button(self, height=2, width=20, text="看結果" , command = self.click_btn1)
		self.cvsMain = tk.Canvas(self , width = 100 , height = 80 , bg = 'white')
		
		
		self.lb1.grid(row=1, column=0, columnspan=1)
		self.lb2.grid(row=2, column=0, columnspan=1)
		self.lb3.grid(row=3, column=0, columnspan=1)
		self.lb4.grid(row=4, column=0, columnspan=1)
		self.lb5.grid(row=5, column=0, columnspan=1)
		self.lb6.grid(row=6, column=0, columnspan=1)
		self.txtw1.grid(row=2, column=1, columnspan=2) 
		self.txtw2.grid(row=3, column=1, columnspan=2)
		self.txtw3.grid(row=5, column=1, columnspan=2)
		self.txtw4.grid(row=6, column=1, columnspan=2)
		self.btn1.grid(row=1,rowspan=6, column=3,sticky=tk.N+tk.S)
		self.cvsMain.grid(row = 7 , columnspan = 4 , column = 0 , sticky = tk.NE + tk.SW)


	def click_btn1(self):
		pass 
		#看按完按鈕要幹嘛加你們的程式碼
		#可以寫成按完button後顯示在空的那個canvas上面

class Window(tk.Frame):
	def __init__(self):
		tk.Frame.__init__(self)
		self.grid()
		self.create_widgets()
	def create_widgets(self):
        
		self.lb1 = tk.Label(self, height=1, width=80, text=" ")
		self.lb2 = tk.Label(self, height=1, width=80, text=" ")
		self.lb3 = tk.Label(self, height=1, width=80, text=" ")
		self.lb4 = tk.Label(self, height=1, width=80, text=" ")
		self.lb5 = tk.Label(self, height=1, width=80, text=" ")
		self.lb6 = tk.Label(self, height=1, width=80, text=" ")
		self.lb7 = tk.Label(self, height=1, width=80, text=" ")
		self.btn1 = tk.Button(self, height=2, width=40, text="使用說明" , command = self.click_btn1)
		self.btn2 = tk.Button(self, height=2, width=40, text="開始使用" , command = self.click_btn2)
		
		self.lb1.grid(row=1, column=0, columnspan=4)
		self.lb2.grid(row=2, column=0, columnspan=4)
		self.lb3.grid(row=3, column=0, columnspan=4)
		self.lb4.grid(row=4, column=0, columnspan=4)
		self.lb5.grid(row=5, column=0, columnspan=4)
		self.lb6.grid(row=6, column=0, columnspan=4)
		self.lb7.grid(row=7, column=0, columnspan=4)
		self.btn1.grid(row=0, column=0)
		self.btn2.grid(row=0, column=2)
		
	def click_btn1(self):
		
		self.lb1.configure(text='1.上https://developers.facebook.com/docs/graph-api?locale=zh_TW 註冊                                                 ')
		self.lb2.configure(text='2.點擊上方「工具」選項，選取圖形API測試工具                                                                                                      ')
		self.lb3.configure(text='3.登入自己的FB帳號，進入自己的塗鴉牆，複製網址                                                                                                 ')
		self.lb4.configure(text='4.將剛才複製的網址貼到「取得權杖」，將以下選項打勾：user hommetown, user posts, user likes             ')
		self.lb5.configure(text='5.按「取得存取權杖」，跑出的一行字即為自己的access token                                                                             ')
		self.lb6.configure(text='6.點擊下方「提交」，出現id和name                                                                                                                           ')
		self.lb7.configure(text='祝您有好的使用體驗！                                                                                                                                                     ')
	
	def click_btn2(self):
		Begin()

		
mywindow = Window()
mywindow.master.title("my window")
mywindow.mainloop()



import requests
import json


def appenddata(d):
    """
    把使用者資料匯成一個list
    """
    if user_counter == 0:
        info["GUY1"].append(d)

    else:
        info["GUY2"].append(d)

def printer(y):
    for i in range(4):
        if i == 3:
            for t in range(len(info[y][3])):
                print(info[y][3][t]["name"], info[y][3][t]["created_time"])

        elif i == 2:
            for t in range(len(info[y][2])):
                if "message" in info[y][2][t]:
                    print(info[y][2][t]["message"], info[y][2][t]["created_time"])

        else:
            print(info[y][i])

    print("____________________________________________________________________________________________________________")

info = dict()
info["GUY1"] = []
info["GUY2"] = []
user_counter = 0

while user_counter <=1:
    """
	讓使用者input其id和access token
    """
    id = input("please enter your id   ").strip()   #輸入id
    access_token = input("please enter your access token   ") .strip()  #輸入access token 取得token 時須取得name hometown likes posts之權限
    url_model = "https://graph.facebook.com/v2.9/iidd?fields=xxxxx&access_token=" + access_token  #網址模板
    url = url_model.replace("iidd", id)   #網址
    fields = ["name","hometown", "posts","likes"]

    for f in fields:
        """
        爬下使用者的資料(包括 : 名子, 家鄉, 貼文內容, 按過讚的粉專)
        匯到 info 這個 dictionary
        兩個人的資料會分別匯到 GUY1 和 GUY2 兩個 list
        """	
        initial_url = url.replace("xxxxx", f)
        response = requests.get(initial_url)
        if f == "name" or f == "hometown":
            html = json.loads(response.text)
            if f in html:
                appenddata(html[f])
            else:
                appenddata("None")

        else:
            html = json.loads(response.text)
            page_counter = 0
            appenddata(html[f]["data"])

            while True:
                if page_counter < 1:
                    sub_url = html[f]["paging"]["next"]
                    response = requests.get(sub_url)
                    html = json.loads(response.text)
                    page_counter += 1

                    if "next" in html :
                        appenddata(html["data"])

                    else:
                        break


                elif page_counter >= 1:
                    sub_url = html["paging"]["next"]
                    response = requests.get(sub_url)
                    html = json.loads(response.text)
                    page_counter += 1

                    if "next" in html:
                        appenddata(html["data"])

                    else:
                        break


    user_counter += 1

printer("GUY1")#改成新的函式
printer("GUY2")#改成新的函式
#print(info)


#print(guy1_list)#確認list內容
#print(guy2_list)


#import jieba.analyse
#jieba.set_dictionary("jieba_dict/dict.txt.big")

#message_tag = "".join(messagelist)

#message_tag = jieba.analyse.extract_tags(line,topK=10,withWeight=True)
#for tag, weight in tags:
    #print(tag + "," + str(int(weight * 10000)))

import re
def remove_symbol(string):#為了去掉不相關字元的函式
    symbol_pattern = re.compile("["
                                u"\U00000021-\U0000002E"  # !~.
                                u"\U0000003A-\U00000040"  # :~@   
                                u"\U0000005B-\U00000060"  # [~`
                                u"\U0000FF1A-\U0000FF20"  # 全形符號
                                u"\U0000007B-\U00002E49"
                                u"\U0000FF3B-\U0000FF40"  # 全形符號
                                u"\U00002FF0-\U000033FF"  # 表意象符號、中日韓符號標點   
                                u"\U0000FF5B-\U0000FFFF"
                                u"\U00010000-\U000E01EF"
                                u"\U0000FB00-\U0000FF0F"  # 字母表達形式、阿拉伯字母、豎排、組合用符號
                                "]+", flags=re.UNICODE)
    return symbol_pattern.sub(r'', string)


guy1_str = str("".join(guy1_list))#guy1要分解的str
guy2_str = str("".join(guy2_list))#guy2要分解的str
guy1_str = remove_symbol(guy1_str)
guy2_str = remove_symbol(guy2_str)

import jieba
import jieba.analyse

jieba.set_dictionary('dict.txt.big.txt')#繁中字典，下載到桌面

seg_list1 = list(jieba.cut_for_search(guy1_str))#切詞句，搜索引擎模式
seg_list2 = list(jieba.cut_for_search(guy2_str))
seg_list1_1 = list(jieba.cut(guy1_str))#第二種切法
seg_list2_1 = list(jieba.cut(guy2_str))

guy1_tags = list(jieba.analyse.extract_tags(guy1_str, 20))#取出10大關鍵字
guy2_tags = list(jieba.analyse.extract_tags(guy2_str, 20))

"""
print(seg_list1)
print(seg_list2)
print(seg_list1_1)
print(seg_list2_1)
"""
common_tags = []#兩人有同樣tag的話
for i in range(len(guy1_tags)):
    if guy1_tags[i] in guy2_tags:
        common_tags.append(guy1_tags[i])
      
print("第一個人臉書常出現的關鍵字:")	  
print(guy1_tags)
print()
print("第二個人臉書常出現的關鍵字")
print(guy2_tags)
print()
if common_tags == []:
    print("你們共同興趣好像不多欸，分享一下自己喜歡什麼來讓對方了解你吧")
else:
    common_tags = "、".join(common_tags)
    
    print("~~~~~~"+common_tags+"~~~~~~  這些字都常常出現在你們的文章中呢!!交流一下彼此意見吧~")
	
com_level = 0#計算相似度用的變數
weight = 0#加成器
x = len(seg_list1)#x:guy1_list數量
n = len(guy1_tags)#n:取的tag數量
for i in range (x):
    if (seg_list1[i] in seg_list2) and (seg_list1[i] not in guy2_tags):#如果在對方list裡面，就+1(基本分)
        com_level += 1
        #print("我加一")
    elif (seg_list1[i] in seg_list2) and (seg_list1[i] in guy2_tags):#如果在對方tag裡面，再+1(意思是這個字詞+2)
        com_level += 2
#print(com_level)


for j in range(n):
    if (guy1_tags[j] in guy2_tags):
    #在自己tag也在對方tag裡，就再+1(這個詞3分)，且加成(2n-a-b)/2n
    #n:取的tag數量、a:在guy1_tag的排序、b:在guy2_tag的排序
        com_level += 1

        a = int(j)#第一個是0
        b = int(guy2_tags.index(guy1_tags[j]))
        weight += ((n*2)-(a+b)) / (n*2)#如果完全相同則加成器為(n+1)/2
        #print("我加三")

adjust_weight = (weight/100) + 1
print(adjust_weight,com_level)
common_final_score = ((com_level*adjust_weight*200)*100) / ((x+2*n)*(n+201))


if common_final_score >= 100:
    common_final_score =100


print("你們的相似度是",int(common_final_score),"%")
print()
